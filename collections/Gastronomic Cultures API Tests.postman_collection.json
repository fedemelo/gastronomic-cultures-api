{
	"info": {
		"_postman_id": "4abccc42-51c0-4f07-8aed-30eb676efb6f",
		"name": "Gastronomic Cultures API Tests",
		"description": "This collection provides comprehensive CRUD operations and detailed views for managing gastronomic data, including products, gastronomic cultures, countries, recipes, and restaurants.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37855496"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Add Product - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"pm.globals.set(\"product_id\", data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"Aged 12 years\",\n  \"history\": \"Originates from Italy\",\n  \"category\": \"Condiments\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"Aged 12 years\",\n  \"history\": \"Originates from Italy\",\n  \"category\": \"Condiments\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/products",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"Aged 12 years\",\n  \"history\": \"Originates from Italy\",\n  \"category\": \"Condiments\"\n}"
						}
					]
				},
				{
					"name": "Get All Products - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of products > ' + 0, function () {\r",
									"   var data = pm.response.json()\r",
									"   pm.expect(data.length).to.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/products",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n\t{\n\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\"name\": \"Olive Oil\",\n\t\t\"description\": \"High-quality extra virgin\",\n\t\t\"history\": \"Used since ancient times\",\n\t\t\"category\": \"Cooking Essentials\",\n\t\t\"cultures\": [\n\t\t\t{\n\t\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\t\"name\": \"Mediterranean\",\n\t\t\t\t\"description\": \"Rich and diverse culinary traditions.\"\n\t\t\t}\n\t\t]\n\t}\n]"
						}
					]
				},
				{
					"name": "Get Product - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/products/00000000-0000-0000-0000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"products",
										"00000000-0000-0000-0000-000000000000"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\"name\": \"Olive Oil\",\n\t\"description\": \"High-quality extra virgin\",\n\t\"history\": \"Used since ancient times\",\n\t\"category\": \"Cooking Essentials\",\n\t\"cultures\": [\n\t\t{\n\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\"name\": \"Mediterranean\",\n\t\t\t\"description\": \"Rich and diverse culinary traditions.\"\n\t\t}\n\t]\n}"
						}
					]
				},
				{
					"name": "Get Product - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/products/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"products",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"error\": \"Product not found with id 00000000-0000-0000-0000-000000000000\"\n}"
						}
					]
				},
				{
					"name": "Update Product - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"High-quality extra thick and delicious\",\n  \"history\": \"Used since old times\",\n  \"category\": \"Cooking Essentials\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"High-quality extra thick and delicious\",\n  \"history\": \"Used since old times\",\n  \"category\": \"Cooking Essentials\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/products/00000000-0000-0000-0000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"products",
										"00000000-0000-0000-0000-000000000000"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"High-quality extra thick and delicious\",\n  \"history\": \"Used since old times\",\n  \"category\": \"Condiments\"\n}"
						}
					]
				},
				{
					"name": "Update Product - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"High-quality extra thick and delicious\",\n  \"history\": \"Used since old times\",\n  \"category\": \"Cooking Essentials\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"High-quality extra thick and delicious\",\n  \"history\": \"Used since old times\",\n  \"category\": \"Cooking Essentials\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/products/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"products",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"error\": \"Product not found with id 00000000-0000-0000-0000-000000000000\"\n}"
						}
					]
				},
				{
					"name": "Delete Product - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"   pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/products/00000000-0000-0000-0000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"products",
										"00000000-0000-0000-0000-000000000000"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete Product - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/products/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"products",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"error\": \"Product not found with id 00000000-0000-0000-0000-000000000000\"\n}"
						}
					]
				}
			],
			"description": "CRUD for Product"
		},
		{
			"name": "Gastronomic Cultures",
			"item": [
				{
					"name": "Add Gastronomic Culture - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extracting data from the response",
									"var responseData = pm.response.json();",
									"",
									"// Set the pm globals to the id of the created product",
									"pm.globals.set(\"cultureId\", responseData.id);",
									"",
									"// Test for the status code to be 201",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/cultures",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}"
						}
					]
				},
				{
					"name": "Get All Gastronomic Cultures - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of cultures > ' + 0, function () {",
									"   var data = pm.response.json()",
									"   pm.expect(data.length).to.greaterThan(0)",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n\t{\n\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\"name\": \"Italian\",\n\t\t\"description\": \"Rich and diverse culinary traditions.\",\n\t\t\"recipes\": [\n\t\t\t{\n\t\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\t\"name\": \"Pasta Carbonara\",\n\t\t\t\t\"description\": \"A classic Italian dish.\",\n\t\t\t\t\"photo\": \"url_to_photo\",\n\t\t\t\t\"preparationProcess\": \"Detailed steps\",\n\t\t\t\t\"video\": \"url_to_video\"\n\t\t\t}\n\t\t],\n\t\t\"products\": [\n\t\t\t{\n\t\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\t\"name\": \"Balsamic Vinegar\",\n\t\t\t\t\"description\": \"High-quality extra thick\",\n\t\t\t\t\"history\": \"Used since ancient times\",\n\t\t\t\t\"category\": \"Cooking Essentials\"\n\t\t\t}\n\t\t],\n\t\t\"restaurants\": [\n\t\t\t{\n\t\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\t\"name\": \"La Pergola\",\n\t\t\t\t\"city\": \"Rome\",\n\t\t\t\t\"michelinStars\": 3,\n\t\t\t\t\"awardDate\": \"2020-05-20\"\n\t\t\t}\n\t\t],\n\t\t\"countries\": [\n\t\t\t{\n\t\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\t\"name\": \"Italy\"\n\t\t\t}\n\t\t]\n\t}\n]"
						}
					]
				},
				{
					"name": "Get Gastronomic Culture - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/{{cultureId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										"{{cultureId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\"name\": \"Italian\",\n\t\"description\": \"Rich and diverse culinary traditions.\",\n\t\"recipes\": [\n\t\t{\n\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\"name\": \"Pasta Carbonara\",\n\t\t\t\"description\": \"A classic Italian dish.\",\n\t\t\t\"photo\": \"url_to_photo\",\n\t\t\t\"preparationProcess\": \"Detailed steps\",\n\t\t\t\"video\": \"url_to_video\"\n\t\t}\n\t],\n\t\"products\": [\n\t\t{\n\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\"name\": \"Balsamic Vinegar\",\n\t\t\t\"description\": \"High-quality extra thick\",\n\t\t\t\"history\": \"Used since ancient times\",\n\t\t\t\"category\": \"Cooking Essentials\"\n\t\t}\n\t],\n\t\"restaurants\": [\n\t\t{\n\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\"name\": \"La Pergola\",\n\t\t\t\"city\": \"Rome\",\n\t\t\t\"michelinStars\": 3,\n\t\t\t\"awardDate\": \"2020-05-20\"\n\t\t}\n\t],\n\t\"countries\": [\n\t\t{\n\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\"name\": \"Italy\"\n\t\t}\n\t]\n}"
						}
					]
				},
				{
					"name": "Get Gastronomic Culture - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Update Gastronomic Culture - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Italian Gastronomic Culture\",\n  \"description\": \"Updated description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Italian Gastronomic Culture\",\n  \"description\": \"Updated description\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Italian Gastronomic Culture\",\n  \"description\": \"Updated description\"\n}"
						}
					]
				},
				{
					"name": "Update Gastronomic Culture - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Italian Gastronomic Culture\",\n  \"description\": \"Updated description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Italian Gastronomic Culture\",\n  \"description\": \"Updated description\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete Gastronomic Culture - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete Gastronomic Culture - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"error\": \"Gastronomic culture not found with id 00000000-0000-0000-0000-000000000000\"\n}"
						}
					]
				}
			],
			"description": "CRUD for GastronomicCulture"
		},
		{
			"name": "Countries",
			"item": [
				{
					"name": "Add Country - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"pm.globals.set(\"countryId\", responseData.id);",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Colombia\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/countries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"France\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/countries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"countries"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"France\"\n}\n"
						}
					]
				},
				{
					"name": "Get All Countries - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of countries > ' + 0, function () {",
									"   var data = pm.response.json()",
									"   pm.expect(data.length).to.greaterThan(0)",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/countries",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"countries"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"name\": \"Italy\",\n\t\t\"restaurants\": [\n\t\t\t{\n\t\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\t\"name\": \"La Pergola\",\n\t\t\t\t\"city\": \"Rome\",\n\t\t\t\t\"michelinStars\": 3,\n\t\t\t\t\"awardDate\": \"2020-05-20\"\n  \t\t}\n\t\t],\n\t\t\"cultures\": [\n\t\t\t{\n\t\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\t\"name\": \"Italian Gastronomic Culture\",\n\t\t\t\t\"description\": \"Rich and diverse culinary traditions.\"\n\t\t\t}\n\t\t]\n  }\n]\n"
						}
					]
				},
				{
					"name": "Get Country - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/{{countryId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										"{{countryId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\"name\": \"Italy\",\n\t\"restaurants\": [\n\t\t{\n\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\"name\": \"La Pergola\",\n\t\t\t\"city\": \"Rome\",\n\t\t\t\"michelinStars\": 3,\n\t\t\t\"awardDate\": \"2020-05-20\"\n\t\t}\n\t],\n\t\"cultures\": [\n\t\t{\n\t\t\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\t\t\"name\": \"Italian Gastronomic Culture\",\n\t\t\t\"description\": \"Rich and diverse culinary traditions.\"\n\t\t}\n\t]\n}"
						}
					]
				},
				{
					"name": "Get Country - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"error\": \"Country not found with id 00000000-0000-0000-0000-000000000000\"\n}"
						}
					]
				},
				{
					"name": "Update Country - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"China\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Spain\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/countries/{{countryId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"countries",
										"{{countryId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Spain\"\n}\n"
						}
					]
				},
				{
					"name": "Update Country - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Spain\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/countries/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Spain\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/countries/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"error\": \"Country not found with id 00000000-0000-0000-0000-000000000000\"\n}"
						}
					]
				},
				{
					"name": "Delete Country - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/countries/{{countryId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"countries",
										"{{countryId}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete Country - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"error\": \"Country not found with id 00000000-0000-0000-0000-000000000000\"\n}"
						}
					]
				}
			],
			"description": "CRUD for Country"
		},
		{
			"name": "Recipes",
			"item": [
				{
					"name": "Add Recipe - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"pm.globals.set(\"recipeId\", data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Risotto\",\n  \"description\": \"Creamy Italian rice dish.\",\n  \"photo\": \"https://www.google.com/url.jpg\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"https://www.google.com/url.mov\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/recipes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto\",\n  \"description\": \"Creamy Italian rice dish.\",\n  \"photo\": \"url_to_photo\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"url_to_video\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/recipes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Risotto\",\n  \"description\": \"Creamy Italian rice dish.\",\n  \"photo\": \"url_to_photo\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"url_to_video\"\n}"
						}
					]
				},
				{
					"name": "Get All Recipes - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of recipes > ' + 0, function () {\r",
									"   var data = pm.response.json()\r",
									"   pm.expect(data.length).to.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/recipes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/recipes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"Pasta Carbonara\",\n    \"description\": \"A classic Italian dish.\",\n    \"photo\": \"url_to_photo\",\n    \"preparationProcess\": \"Detailed steps\",\n    \"video\": \"url_to_video\",\n    \"culture\": null\n  }\n]"
						}
					]
				},
				{
					"name": "Get Recipe - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/recipes/{{recipeId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes",
								"{{recipeId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/recipes/{{recipeId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recipes",
										"{{recipeId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"name\": \"Pasta Carbonara\",\n    \"description\": \"A classic Italian dish.\",\n    \"photo\": \"url_to_photo\",\n    \"preparationProcess\": \"Detailed steps\",\n    \"video\": \"url_to_video\",\n    \"culture\": null\n}"
						}
					]
				},
				{
					"name": "Get Recipe - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The recipe with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/recipes/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/recipes/00000000-0000-4000-8000-000000000000",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recipes",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The recipe with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Update Recipe - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Risotto\",\n  \"description\": \"Updated description\",\n  \"photo\": \"https://www.google.com/url.jpg\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"https://www.google.com/url.mov\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/recipes/{{recipeId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes",
								"{{recipeId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Risotto\",\n    \"description\": \"Updated description\",\n    \"photo\": \"https://www.google.com/url.jpg\",\n    \"preparationProcess\": \"Detailed steps\",\n    \"video\": \"https://www.google.com/url.mov\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/recipes/{{recipeId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"recipes",
										"{{recipeId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"c2584233-8380-4457-97db-3b1232c27d41\",\n    \"name\": \"Risotto\",\n    \"description\": \"Updated description\",\n    \"photo\": \"https://www.google.com/url.jpg\",\n    \"preparationProcess\": \"Detailed steps\",\n    \"video\": \"https://www.google.com/url.mov\"\n}"
						}
					]
				},
				{
					"name": "Update Recipe - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The recipe with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Risotto\",\n  \"description\": \"Updated description\",\n  \"photo\": \"https://www.google.com/url.jpg\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"https://www.google.com/url.mov\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/recipes/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto\",\n  \"description\": \"Updated description\",\n  \"photo\": \"url_to_photo\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"url_to_video\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/recipes/00000000-0000-4000-8000-000000000000",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recipes",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The recipe with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete Recipe - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"   pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/recipes/{{recipeId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes",
								"{{recipeId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/recipes/{{recipeId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recipes",
										"{{recipeId}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete Recipe - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The recipe with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/recipes/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/recipes/00000000-0000-4000-8000-000000000000",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recipes",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The recipe with the given id was not found\"\n}"
						}
					]
				}
			],
			"description": "CRUD for Recipe"
		},
		{
			"name": "Restaurants",
			"item": [
				{
					"name": "Add Restaurant - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"pm.globals.set(\"restaurantId\", responseData.id);",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}"
						}
					]
				},
				{
					"name": "Get All Restaurants - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of restaurants > ' + 0, function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.length).to.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/restaurants",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"restaurants"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"La Pergola\",\n    \"city\": \"Rome\",\n    \"michelinStars\": 3,\n    \"awardDate\": \"2020-05-20\",\n    \"cultures\": [\n      {\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"Mediterranean\",\n        \"description\": \"Rich and diverse culinary traditions.\"\n      }\n\t],\n    \"country\": {\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"Italy\"\n    }\n  }\n]\n"
						}
					]
				},
				{
					"name": "Get Restaurant - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/restaurants/{{restaurantId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"restaurants",
										"{{restaurantId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"name\": \"La Pergola\",\n    \"city\": \"Rome\",\n    \"michelinStars\": 3,\n    \"awardDate\": \"2020-05-20\",\n    \"cultures\": [\n      {\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"Mediterranean\",\n        \"description\": \"Rich and diverse culinary traditions.\"\n      }\n\t],\n    \"country\": {\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"Italy\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get Restaurant - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/restaurants/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/restaurants/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"restaurants",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"error\": \"Restaurant not found with id 00000000-0000-0000-0000-000000000000\"\n}"
						}
					]
				},
				{
					"name": "Update Restaurant - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Updated City\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Updated City\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/restaurants/{{restaurantId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"restaurants",
										"{{restaurantId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Updated City\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}"
						}
					]
				},
				{
					"name": "Update Restaurant - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Updated City\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/restaurants/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Updated City\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/restaurants/00000000-0000-4000-8000-000000000000",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"restaurants",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"error\": \"Restaurant not found with id 00000000-0000-0000-0000-000000000000\"\n}"
						}
					]
				},
				{
					"name": "Delete Restaurant - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/restaurants/{{restaurantId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"restaurants",
										"{{restaurantId}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete Restaurant - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/restaurants/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/restaurants/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"restaurants",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"error\": \"Restaurant not found with id 00000000-0000-0000-0000-000000000000\"\n}"
						}
					]
				}
			],
			"description": "CRUD for Restaurant"
		},
		{
			"name": "Gastronomic Cultures-Products",
			"item": [
				{
					"name": "Add Gastronomic Culture - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extracting data from the response",
									"var responseData = pm.response.json();",
									"",
									"// Set the pm globals to the id of the created product",
									"pm.globals.set(\"cultureId\", responseData.id);",
									"",
									"// Test for the status code to be 201",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/cultures",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}"
						}
					]
				},
				{
					"name": "Add Product 1 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"pm.globals.set(\"product_id_1\", data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"Aged 12 years\",\n  \"history\": \"Originates from Italy\",\n  \"category\": \"Condiments\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"Aged 12 years\",\n  \"history\": \"Originates from Italy\",\n  \"category\": \"Condiments\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/products",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"Aged 12 years\",\n  \"history\": \"Originates from Italy\",\n  \"category\": \"Condiments\"\n}"
						}
					]
				},
				{
					"name": "Add Product 2 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"pm.globals.set(\"product_id_2\", data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"Aged 12 years\",\n  \"history\": \"Originates from Italy\",\n  \"category\": \"Condiments\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"Aged 12 years\",\n  \"history\": \"Originates from Italy\",\n  \"category\": \"Condiments\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/products",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Balsamic Vinegar\",\n  \"description\": \"Aged 12 years\",\n  \"history\": \"Originates from Italy\",\n  \"category\": \"Condiments\"\n}"
						}
					]
				},
				{
					"name": "Add a product to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/products/{{product_id_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"products",
								"{{product_id_1}}"
							]
						}
					},
					"response": [
						{
							"name": "Add a product to a gastronomic culture",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products/:product_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "product_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"name\": \"Italian\",\n    \"description\": \"Rich and diverse culinary traditions.\",\n    \"recipes\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Pasta Carbonara\",\n            \"description\": \"A classic Italian dish.\",\n            \"photo\": \"url_to_photo\",\n            \"preparationProcess\": \"Detailed steps\",\n            \"video\": \"url_to_video\"\n        }\n    ],\n    \"products\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Balsamic Vinegar\",\n            \"description\": \"High-quality extra thick\",\n            \"history\": \"Used since ancient times\",\n            \"category\": \"Cooking Essentials\"\n        }\n    ],\n    \"restaurants\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"La Pergola\",\n            \"city\": \"Rome\",\n            \"michelinStars\": 3,\n            \"awardDate\": \"2020-05-20\"\n        }\n    ],\n    \"countries\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Italy\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Add an invalid product to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/products/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"products",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Add an invalid product to a gastronomic culture",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products/:product_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "product_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Add a product to an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-0000-0000-000000000000/products/{{product_id_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-0000-0000-000000000000",
								"products",
								"{{product_id_1}}"
							]
						}
					},
					"response": [
						{
							"name": "Add a product to an invalid gastronomic culture",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products/:product_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "0"
										},
										{
											"key": "product_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a product of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/products/{{product_id_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"products",
								"{{product_id_1}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a product of a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products/:product_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "product_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"name\": \"Olive Oil\",\n    \"description\": \"High-quality extra virgin\",\n    \"history\": \"Used since ancient times\",\n    \"category\": \"Cooking Essentials\",\n    \"cultures\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Mediterranean\",\n            \"description\": \"Rich and diverse culinary traditions.\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get an invalid product of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/products/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"products",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Get an invalid product of a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products/:product_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "product_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a product of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-0000-0000-000000000000/products/{{product_id_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-0000-0000-000000000000",
								"products",
								"{{product_id_1}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a product of an invalid gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products/:product_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "0"
										},
										{
											"key": "product_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a product non-associated to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {\r",
									"   pm.response.to.have.status(412);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The product with the given id is not associated to the gastronomic culture\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/products/{{product_id_2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"products",
								"{{product_id_2}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a product non-associated to a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products/:product_id_2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products",
										":product_id_2"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "product_id_2",
											"value": "00000000-0000-0000-0000-000000000001"
										}
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The product with the given id is not associated to The gastronomic culture\"\n}"
						}
					]
				},
				{
					"name": "Get all products of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Get all products of a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"Olive Oil\",\n        \"description\": \"High-quality extra virgin\",\n        \"history\": \"Used since ancient times\",\n        \"category\": \"Cooking Essentials\",\n        \"cultures\": [\n            {\n                \"id\": \"00000000-0000-0000-0000-000000000000\",\n                \"name\": \"Mediterranean\",\n                \"description\": \"Rich and diverse culinary traditions.\"\n            }\n        ]\n    }\n]"
						}
					]
				},
				{
					"name": "Get all products of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-0000-0000-000000000000/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-0000-0000-000000000000",
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Get all products of an invalid gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Update products of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"{{product_id_2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Update products of a gastronomic culture",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   {\r\n       \"id\": \"{{product_id_2}}\"\r\n   }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"name\": \"Italian\",\n    \"description\": \"Rich and diverse culinary traditions.\",\n    \"recipes\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Pasta Carbonara\",\n            \"description\": \"A classic Italian dish.\",\n            \"photo\": \"url_to_photo\",\n            \"preparationProcess\": \"Detailed steps\",\n            \"video\": \"url_to_video\"\n        }\n    ],\n    \"products\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Balsamic Vinegar\",\n            \"description\": \"High-quality extra thick\",\n            \"history\": \"Used since ancient times\",\n            \"category\": \"Cooking Essentials\"\n        }\n    ],\n    \"restaurants\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"La Pergola\",\n            \"city\": \"Rome\",\n            \"michelinStars\": 3,\n            \"awardDate\": \"2020-05-20\"\n        }\n    ],\n    \"countries\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Italy\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Update invalid products of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Update invalid products of a gastronomic culture",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   {\r\n       \"id\": \"0\"\r\n   }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Update products of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"{{product_id_2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-0000-0000-000000000000/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-0000-0000-000000000000",
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Update products of an invalid gastronomic culture",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   {\r\n       \"id\": \"{{product_id_2}}\"\r\n   }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a product of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"   pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/products/{{product_id_2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"products",
								"{{product_id_2}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete a product of a gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products/:product_id_2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products",
										":product_id_2"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "product_id_2",
											"value": "00000000-0000-0000-0000-000000000001"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete an invalid product of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/products/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"products",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Delete an invalid product of a gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products/:product_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "product_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The product with the given id was not found\"\r\n}"
						}
					]
				},
				{
					"name": "Delete a product of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-0000-0000-000000000000/products/{{product_id_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-0000-0000-000000000000",
								"products",
								"{{product_id_1}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete a product of an invalid gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products/:product_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "0"
										},
										{
											"key": "product_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The gastronomic culture with the given id was not found\"\r\n}"
						}
					]
				},
				{
					"name": "Delete a product non-associated to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {\r",
									"   pm.response.to.have.status(412);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The product with the given id is not associated to the gastronomic culture\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/products/{{product_id_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"products",
								"{{product_id_1}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete a product non-associated to a gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/products/:product_id_2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"products",
										":product_id_2"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "product_id_2",
											"value": "00000000-0000-0000-0000-000000000001"
										}
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\r\n   \"statusCode\": 412,\r\n   \"message\": \"The product with the given id is not associated to The gastronomic culture\"\r\n}"
						}
					]
				}
			],
			"description": "`GastronomicCulture` `1..\\*` —— `\\*` `Product`: Una cultura gastronómica puede hacer uso de múltiples productos y a un producto le pueden dar uso múltiples culturas gastronómicas, al menos una para que esté presente."
		},
		{
			"name": "Gastronomic Culture-Recipes",
			"item": [
				{
					"name": "Add Gastronomic Culture - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extracting data from the response",
									"var responseData = pm.response.json();",
									"",
									"// Set the pm globals to the id of the created product",
									"pm.globals.set(\"cultureId\", responseData.id);",
									"",
									"// Test for the status code to be 201",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}"
						}
					]
				},
				{
					"name": "Add Recipe - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"pm.globals.set(\"recipeId\", data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Risotto\",\n  \"description\": \"Creamy Italian rice dish.\",\n  \"photo\": \"https://www.google.com/url.jpg\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"https://www.google.com/url.mov\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/recipes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto\",\n  \"description\": \"Creamy Italian rice dish.\",\n  \"photo\": \"url_to_photo\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"url_to_video\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/recipes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Risotto\",\n  \"description\": \"Creamy Italian rice dish.\",\n  \"photo\": \"url_to_photo\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"url_to_video\"\n}"
						}
					]
				},
				{
					"name": "Add Recipe 2 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"pm.globals.set(\"recipeId2\", data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Pasta carbonara\",\n  \"description\": \"Creamy Italian rice dish.\",\n  \"photo\": \"https://www.google.com/url.jpg\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"https://www.google.com/url.mov\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/recipes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto\",\n  \"description\": \"Creamy Italian rice dish.\",\n  \"photo\": \"url_to_photo\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"url_to_video\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/recipes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Risotto\",\n  \"description\": \"Creamy Italian rice dish.\",\n  \"photo\": \"url_to_photo\",\n  \"preparationProcess\": \"Detailed steps\",\n  \"video\": \"url_to_video\"\n}"
						}
					]
				},
				{
					"name": "Add a recipe to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/{{recipeId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"recipes",
								"{{recipeId}}"
							]
						}
					},
					"response": [
						{
							"name": "Add a recipe to a gastronomic culture",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/{{recipeId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										"{{cultureId}}",
										"recipes",
										"{{recipeId}}"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"a35ba732-e28c-479f-b3b7-c95f1c8586db\",\n    \"name\": \"Latin American\",\n    \"description\": \"Rich and diverse culinary traditions.\",\n    \"countries\": [],\n    \"restaurants\": [],\n    \"recipes\": [\n        {\n            \"id\": \"e45ef456-773f-4608-b8fc-7ab4d673ff49\",\n            \"name\": \"Risotto\",\n            \"description\": \"Creamy Italian rice dish.\",\n            \"photo\": \"https://www.google.com/url.jpg\",\n            \"preparationProcess\": \"Detailed steps\",\n            \"video\": \"https://www.google.com/url.mov\",\n            \"gastronomicCulture\": null\n        }\n    ],\n    \"products\": []\n}"
						}
					]
				},
				{
					"name": "Add an invalid recipe to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The recipe with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/:recipe_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"recipes",
								":recipe_id"
							],
							"variable": [
								{
									"key": "recipe_id",
									"value": "00000000-0000-4000-8000-000000000000"
								}
							]
						}
					},
					"response": [
						{
							"name": "Add an invalid recipe to a gastronomic culture",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/:recipe_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										"{{cultureId}}",
										"recipes",
										":recipe_id"
									],
									"variable": [
										{
											"key": "recipe_id",
											"value": "00000000-0000-4000-8000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The recipe with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Add a recipe to an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/:cultureId/recipes/{{recipeId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								":cultureId",
								"recipes",
								"{{recipeId}}"
							],
							"variable": [
								{
									"key": "cultureId",
									"value": "00000000-0000-4000-8000-000000000000"
								}
							]
						}
					},
					"response": [
						{
							"name": "Add a recipe to an invalid gastronomic culture",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/recipes/{{recipeId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"recipes",
										"{{recipeId}}"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a recipe of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/{{recipeId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"recipes",
								"{{recipeId}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a recipe of a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/{{recipeId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										"{{cultureId}}",
										"recipes",
										"{{recipeId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"e45ef456-773f-4608-b8fc-7ab4d673ff49\",\n    \"name\": \"Risotto\",\n    \"description\": \"Creamy Italian rice dish.\",\n    \"photo\": \"https://www.google.com/url.jpg\",\n    \"preparationProcess\": \"Detailed steps\",\n    \"video\": \"https://www.google.com/url.mov\",\n    \"gastronomicCulture\": {\n        \"id\": \"a35ba732-e28c-479f-b3b7-c95f1c8586db\",\n        \"name\": \"Latin American\",\n        \"description\": \"Rich and diverse culinary traditions.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get an invalid recipe of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The recipe with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/:recipe_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"recipes",
								":recipe_id"
							],
							"variable": [
								{
									"key": "recipe_id",
									"value": "00000000-0000-0000-0000-000000000000"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get an invalid recipe of a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/:recipe_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										"{{cultureId}}",
										"recipes",
										":recipe_id"
									],
									"variable": [
										{
											"key": "recipe_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The recipe with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a recipe of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/:culture_id/recipes/{{recipeId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								":culture_id",
								"recipes",
								"{{recipeId}}"
							],
							"variable": [
								{
									"key": "culture_id",
									"value": "00000000-0000-0000-0000-000000000000"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get a recipe of an invalid gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/recipes/{{recipeId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"recipes",
										"{{recipeId}}"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a recipe non-associated to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {\r",
									"   pm.response.to.have.status(412);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The recipe with the given id is not associated to the gastronomic culture\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/{{recipeId2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"recipes",
								"{{recipeId2}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a recipe non-associated to a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/{{recipeId2}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										"{{cultureId}}",
										"recipes",
										"{{recipeId2}}"
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The recipe with the given id is not associated to The gastronomic culture\"\n}"
						}
					]
				},
				{
					"name": "Get all recipes of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/recipes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"recipes"
							]
						}
					},
					"response": [
						{
							"name": "Get all recipes of a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/{{cultureId}}/recipes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										"{{cultureId}}",
										"recipes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"de2a2469-f2e9-4a58-a6cb-5a090392143a\",\n        \"name\": \"Risotto\",\n        \"description\": \"Creamy Italian rice dish.\",\n        \"photo\": \"https://www.google.com/url.jpg\",\n        \"preparationProcess\": \"Detailed steps\",\n        \"video\": \"https://www.google.com/url.mov\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get all recipes of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/:culture_id/recipes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								":culture_id",
								"recipes"
							],
							"variable": [
								{
									"key": "culture_id",
									"value": "00000000-0000-0000-0000-000000000000"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get all recipes of an invalid gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/recipes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"recipes"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The gastronomic culture with the given id was not found\"\r\n}"
						}
					]
				},
				{
					"name": "Update recipes of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"{{recipeId2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/recipes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"recipes"
							]
						}
					},
					"response": [
						{
							"name": "Update recipes of a gastronomic culture",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   {\r\n       \"id\": \"{{recipeId2}}\"\r\n   }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cultures/{{cultureId}}/recipes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										"{{cultureId}}",
										"recipes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"24382c00-1ac1-44a5-9f8d-84d56d7eddae\",\n    \"name\": \"Latin American\",\n    \"description\": \"Rich and diverse culinary traditions.\",\n    \"countries\": [],\n    \"restaurants\": [],\n    \"recipes\": [\n        {\n            \"id\": \"0963e0a4-d3e5-4d1a-9d94-18de7bbd139b\"\n        }\n    ],\n    \"products\": []\n}"
						}
					]
				},
				{
					"name": "Update invalid recipes of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The recipe with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/recipes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"recipes"
							]
						}
					},
					"response": [
						{
							"name": "Update invalid recipes of a gastronomic culture",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cultures/{{cultureId}}/recipes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										"{{cultureId}}",
										"recipes"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The recipe with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Update recipes of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"{{recipeId2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/:culture_id/recipes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								":culture_id",
								"recipes"
							],
							"variable": [
								{
									"key": "culture_id",
									"value": "00000000-0000-0000-0000-000000000000"
								}
							]
						}
					},
					"response": [
						{
							"name": "Update recipes of an invalid gastronomic culture",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   {\r\n       \"id\": \"{{recipe_id_2}}\"\r\n   }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/recipes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"recipes"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a recipe of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"   pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/{{recipeId2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"recipes",
								"{{recipeId2}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete a recipe of a gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/{{recipeId2}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										"{{cultureId}}",
										"recipes",
										"{{recipeId2}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete an invalid recipe of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The recipe with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/:recipe_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"recipes",
								":recipe_id"
							],
							"variable": [
								{
									"key": "recipe_id",
									"value": "00000000-0000-0000-0000-000000000000"
								}
							]
						}
					},
					"response": [
						{
							"name": "Delete an invalid recipe of a gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/:recipe_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										"{{cultureId}}",
										"recipes",
										":recipe_id"
									],
									"variable": [
										{
											"key": "recipe_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The recipe with the given id was not found\"\r\n}"
						}
					]
				},
				{
					"name": "Delete a recipe of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/:culture_id/recipes/{{recipeId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								":culture_id",
								"recipes",
								"{{recipeId}}"
							],
							"variable": [
								{
									"key": "culture_id",
									"value": "00000000-0000-0000-0000-000000000000"
								}
							]
						}
					},
					"response": [
						{
							"name": "Delete a recipe of an invalid gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/:culture_id/recipes/{{recipeId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										":culture_id",
										"recipes",
										"{{recipeId}}"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "000000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The gastronomic culture with the given id was not found\"\r\n}"
						}
					]
				},
				{
					"name": "Delete a recipe non-associated to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {\r",
									"   pm.response.to.have.status(412);\r",
									"});\r",
									"\r",
									"pm.test(\"Get expected error message\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The recipe with the given id is not associated to the gastronomic culture\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/{{recipeId2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"recipes",
								"{{recipeId2}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete a recipe non-associated to a gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/cultures/{{cultureId}}/recipes/{{recipeId2}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"cultures",
										"{{cultureId}}",
										"recipes",
										"{{recipeId2}}"
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\r\n   \"statusCode\": 412,\r\n   \"message\": \"The recipe with the given id is not associated to The gastronomic culture\"\r\n}"
						}
					]
				}
			],
			"description": "`GastronomicCulture` `1` —— `\\*` `Recipe`: Una cultura gastronómica puede contar con múltiples recetas, mas cada receta está asociada a exclusivamente única cultura gastronómica."
		},
		{
			"name": "Gastronomic Cultures-Restaurants",
			"item": [
				{
					"name": "Add Gastronomic Culture - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extracting data from the response",
									"var responseData = pm.response.json();",
									"",
									"// Set the pm globals to the id of the created product",
									"pm.globals.set(\"cultureId\", responseData.id);",
									"",
									"// Test for the status code to be 201",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/cultures",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}"
						}
					]
				},
				{
					"name": "Add Restaurant 1 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for the status code to be 201",
									"pm.test(\"Response status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});",
									"",
									"var responseData = pm.response.json();",
									"pm.globals.set(\"restaurantId1\", responseData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}"
						}
					]
				},
				{
					"name": "Add Restaurant 2 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for the status code to be 201",
									"pm.test(\"Response status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});",
									"",
									"var responseData = pm.response.json();",
									"pm.globals.set(\"restaurantId2\", responseData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}"
						}
					]
				},
				{
					"name": "Add a restaurant to gastronomic culture - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for the status code to be 201",
									"pm.test(\"Response status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/restaurants/{{restaurantId1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"restaurants",
								"{{restaurantId1}}"
							]
						}
					},
					"response": [
						{
							"name": "Add Restaurant Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}/restaurants/{{restaurantId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}",
										"restaurants",
										"{{restaurantId}}"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"La Pergola\",\n  \"city\": \"Rome\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2020-05-20\"\n}"
						}
					]
				},
				{
					"name": "Add an invalid restaurant to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for 404 response",
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"// Validate error message",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/restaurants/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"restaurants",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Restaurant Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}/restaurants/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}",
										"restaurants",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The restaurant with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Add a restaurant to an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for 404 response",
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"// Validate error message",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000/restaurants/{{restaurantId1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000",
								"restaurants",
								"{{restaurantId1}}"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Gastronomic Culture Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/00000000-0000-4000-8000-000000000000/restaurants/{{restaurantId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"00000000-0000-4000-8000-000000000000",
										"restaurants",
										"{{restaurantId}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a restaurant of a gastronomic culture - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for the status code to be 200",
									"pm.test(\"Response status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/restaurants/{{restaurantId1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"restaurants",
								"{{restaurantId1}}"
							]
						}
					},
					"response": [
						{
							"name": "Get Restaurant Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}/restaurants/{{restaurantId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}",
										"restaurants",
										"{{restaurantId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"La Pergola\",\n  \"city\": \"Rome\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2020-05-20\"\n}"
						}
					]
				},
				{
					"name": "Get an invalid restaurant of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for 404 response",
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"// Validate error message",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/restaurants/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"restaurants",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Restaurant Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}/restaurants/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}",
										"restaurants",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The restaurant with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a restaurant of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for 404 response",
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"// Validate error message",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000/restaurants/{{restaurantId1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000",
								"restaurants",
								"{{restaurantId1}}"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Gastronomic Culture Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/00000000-0000-4000-8000-000000000000/restaurants/{{restaurantId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"00000000-0000-4000-8000-000000000000",
										"restaurants",
										"{{restaurantId}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a restaurant non-associated to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for 412 response",
									"pm.test(\"Response status code is 412\", function () {",
									"   pm.response.to.have.status(412);",
									"});",
									"// Validate error message",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id is not associated to the gastronomic culture\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/restaurants/{{restaurantId2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"restaurants",
								"{{restaurantId2}}"
							]
						}
					},
					"response": [
						{
							"name": "Restaurant Non-Associated Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}/restaurants/{{restaurantId2}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}",
										"restaurants",
										"{{restaurantId2}}"
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 412,\n  \"message\": \"The restaurant with the given id is not associated to the gastronomic culture\"\n}"
						}
					]
				},
				{
					"name": "Get all restaurants of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for the status code to be 200",
									"pm.test(\"Response status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Get All Restaurants Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}",
										"restaurants"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"name\": \"La Pergola\",\n    \"city\": \"Rome\",\n    \"michelinStars\": 3,\n    \"awardDate\": \"2020-05-20\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get all restaurants of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for 404 response",
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"// Validate error message",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000",
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Gastronomic Culture Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/00000000-0000-4000-8000-000000000000/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"00000000-0000-4000-8000-000000000000",
										"restaurants"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Update restaurants of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for the status code to be 200",
									"pm.test(\"Response status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": \"{{restaurantId2}}\"\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Update Restaurants Response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": \"{{restaurantId2}}\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}",
										"restaurants"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"La Pergola\",\n  \"city\": \"Rome\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2020-05-20\"\n}"
						}
					]
				},
				{
					"name": "Update an invalid restaurant of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for 404 response",
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"// Validate error message",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": \"00000000-0000-4000-8000-000000000000\"\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Restaurant Response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": \"00000000-0000-4000-8000-000000000000\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}",
										"restaurants"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The restaurant with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Update restaurants of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for 404 response",
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"// Validate error message",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": \"{{restaurantId2}}\"\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000",
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Gastronomic Culture Response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": \"{{restaurantId2}}\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/00000000-0000-4000-8000-000000000000/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"00000000-0000-4000-8000-000000000000",
										"restaurants"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a restaurant from a gastronomic culture - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for the status code to be 204",
									"pm.test(\"Response status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/restaurants/{{restaurantId2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"restaurants",
								"{{restaurantId2}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete Restaurant Success Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}/restaurants/{{restaurantId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}",
										"restaurants",
										"{{restaurantId}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete an invalid restaurant of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for 404 response",
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"// Validate error message",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/restaurants/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"restaurants",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Restaurant Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}/restaurants/00000000-0000-4000-8000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}",
										"restaurants",
										"00000000-0000-4000-8000-000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The restaurant with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a restaurant from an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for 404 response",
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"// Validate error message",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000/restaurants/{{restaurantId1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000",
								"restaurants",
								"{{restaurantId1}}"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Gastronomic Culture Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/00000000-0000-4000-8000-000000000000/restaurants/{{restaurantId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"00000000-0000-4000-8000-000000000000",
										"restaurants",
										"{{restaurantId}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a restaurant non-associated to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for 412 response",
									"pm.test(\"Response status code is 412\", function () {",
									"   pm.response.to.have.status(412);",
									"});",
									"// Validate error message",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id is not associated to the gastronomic culture\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/restaurants/{{restaurantId2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"restaurants",
								"{{restaurantId2}}"
							]
						}
					},
					"response": [
						{
							"name": "Restaurant Non-Associated Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures/{{cultureId}}/restaurants/{{restaurantId2}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures",
										"{{cultureId}}",
										"restaurants",
										"{{restaurantId2}}"
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 412,\n  \"message\": \"The restaurant with the given id is not associated to the gastronomic culture\"\n}"
						}
					]
				}
			],
			"description": "`Restaurant` `1..*` —— `*..1` `GastronomicCulture`: A restaurant can represent multiple gastronomic cultures, and a gastronomic culture can be represented by multiple restaurants."
		},
		{
			"name": "Country-Restaurants",
			"item": [
				{
					"name": "Add Restaurant - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extracting data from the response",
									"var responseData = pm.response.json();",
									"",
									"// Set the pm globals to the id of the created restaurant",
									"pm.globals.set(\"restaurantId\", responseData.id);",
									"",
									"// Test for the status code to be 201",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"La Pergola\",\n  \"city\": \"Rome\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2020-05-20\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"La Pergola\",\n  \"city\": \"Rome\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2020-05-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"La Pergola\",\n  \"city\": \"Rome\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2020-05-20\"\n}"
						}
					]
				},
				{
					"name": "Add Restaurant 2 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for the status code to be 201",
									"pm.test(\"Response status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});",
									"",
									"var responseData = pm.response.json();",
									"pm.globals.set(\"restaurantId2\", responseData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"El Celler de Can Roca\",\n  \"city\": \"Girona\",\n  \"michelinStars\": 3,\n  \"awardDate\": \"2021-06-15\"\n}"
						}
					]
				},
				{
					"name": "Add Country - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to get the data and set the pm globals to the id of the created country",
									"pm.test(\"Get the data and set the pm globals to the id of the created country\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.globals.set(\"countryId\", responseData.id);",
									"});",
									"",
									"// Test for the status code to be 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Italy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/countries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Italy\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/countries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"countries"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Italy\"\n}"
						}
					]
				},
				{
					"name": "Add a Restaurant to a Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Add a Restaurant to a Country",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants/:restaurant_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants",
										":restaurant_id"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "restaurant_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"name\": \"La Pergola\",\n    \"city\": \"Rome\",\n    \"michelinStars\": 3,\n    \"awardDate\": \"2020-05-20\",\n    \"country\": {\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"Italy\"\n    }\n}"
						}
					]
				},
				{
					"name": "Add an Invalid Restaurant to a Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Add an Invalid Restaurant to a Country",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants/:restaurant_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants",
										":restaurant_id"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "restaurant_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The restaurant with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Add a Restaurant to an Invalid Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/00000000-0000-4000-8000-000000000000/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"00000000-0000-4000-8000-000000000000",
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Add a Restaurant to an Invalid Country",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants/:restaurant_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants",
										":restaurant_id"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "0"
										},
										{
											"key": "restaurant_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The country with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a Restaurant of a Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a Restaurant of a Country",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants/:restaurant_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants",
										":restaurant_id"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "restaurant_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"name\": \"La Pergola\",\n    \"city\": \"Rome\",\n    \"michelinStars\": 3,\n    \"awardDate\": \"2020-05-20\",\n    \"country\": {\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"Italy\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get an Invalid Restaurant of a Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Get an Invalid Restaurant of a Country",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants/:restaurant_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants",
										":restaurant_id"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "restaurant_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The restaurant with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a Restaurant of an invalid Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/00000000-0000-4000-8000-000000000000/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"00000000-0000-4000-8000-000000000000",
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a Restaurant of an invalid Country",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants/:restaurant_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants",
										":restaurant_id"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "restaurant_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The country with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a Restaurant not associated to a Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {",
									"   pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id is not associated to the country\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants/{{restaurantId2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants",
								"{{restaurantId2}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a Restaurant not associated to a Country",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants/:restaurant_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants",
										":restaurant_id"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "restaurant_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The restaurant with the given id is not associated to the country\"\n}"
						}
					]
				},
				{
					"name": "Get all Restaurants of a Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Get all Restaurants of a Country",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"La Pergola\",\n        \"city\": \"Rome\",\n        \"michelinStars\": 3,\n        \"awardDate\": \"2020-05-20\",\n        \"country\": {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Italy\"\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "Get all Restaurants of an invalid Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Get all Restaurants of an invalid Country",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The restaurant with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Update Restaurants of a Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n   {\n       \"id\": \"{{restaurantId}}\"\n   }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Update Restaurants of a Country",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n   {\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\n   }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"name\": \"Italy\",\n    \"restaurants\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Update an invalid Restaurant of a Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n   {\n       \"id\": \"00000000-0000-4000-8000-000000000000\"\n   }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Update an invalid Restaurant of a Country",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n   {\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\n   }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The restaurant with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Update Restaurants of an invalid Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error message matches expected\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n   {\n       \"id\": \"{{restaurantId}}\"\n   }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/countries/00000000-0000-0000-0000-000000000000/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"00000000-0000-0000-0000-000000000000",
								"restaurants"
							]
						}
					},
					"response": [
						{
							"name": "Update Restaurants of an invalid Country",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n   {\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\n   }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The country with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a Restaurant of a Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete a Restaurant of a Country",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants/:restaurant_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants",
										":restaurant_id"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "restaurant_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete an Invalid Restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Delete an Invalid Restaurant",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants/:restaurant_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants",
										":restaurant_id"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "restaurant_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The restaurant with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a Restaurant from an Invalid Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/00000000-0000-4000-8000-000000000000/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"00000000-0000-4000-8000-000000000000",
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete a Restaurant from an Invalid Country",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants/:restaurant_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants",
										":restaurant_id"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "0"
										},
										{
											"key": "restaurant_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The country with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a Restaurant Non-Associated to a Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {",
									"   pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The restaurant with the given id is not associated to the country\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/countries/{{countryId}}/restaurants/{{restaurantId2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries",
								"{{countryId}}",
								"restaurants",
								"{{restaurantId2}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete a Restaurant Non-Associated to a Country",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/countries/:country_id/restaurants/:restaurant_id_2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"countries",
										":country_id",
										"restaurants",
										":restaurant_id_2"
									],
									"variable": [
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "restaurant_id_2",
											"value": "00000000-0000-0000-0000-000000000001"
										}
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The restaurant with the given id is not associated to the country\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Gastronomic Cultures-Countries",
			"item": [
				{
					"name": "Add Gastronomic Culture - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extracting data from the response",
									"var responseData = pm.response.json();",
									"",
									"// Set the pm globals to the id of the created product",
									"pm.globals.set(\"cultureId\", responseData.id);",
									"",
									"// Test for the status code to be 201",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/cultures",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"cultures"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Latin American\",\n  \"description\": \"Rich and diverse culinary traditions.\"\n}"
						}
					]
				},
				{
					"name": "Add Country 1 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to get the data and set the pm globals to the id of the created country",
									"pm.test(\"Get the data and set the pm globals to the id of the created country\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.globals.set(\"countryId1\", responseData.id);",
									"});",
									"",
									"// Test for the status code to be 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"France\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/countries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"France\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/countries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"countries"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"France\"\n}\n"
						}
					]
				},
				{
					"name": "Add Country 2 - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to get the data and set the pm globals to the id of the created country",
									"pm.test(\"Get the data and set the pm globals to the id of the created country\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.globals.set(\"countryId2\", responseData.id);",
									"});",
									"",
									"// Test for the status code to be 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"France2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/countries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"countries"
							]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"France2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/countries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"countries"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"France\"\n}\n"
						}
					]
				},
				{
					"name": "Add a country to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/countries/{{countryId1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"countries",
								"{{countryId1}}"
							]
						}
					},
					"response": [
						{
							"name": "Add a country to a gastronomic culture",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries/:country_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries",
										":country_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"name\": \"Italian\",\n    \"description\": \"Rich and diverse culinary traditions.\",\n    \"recipes\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Pasta Carbonara\",\n            \"description\": \"A classic Italian dish.\",\n            \"photo\": \"url_to_photo\",\n            \"preparationProcess\": \"Detailed steps\",\n            \"video\": \"url_to_video\"\n        }\n    ],\n    \"countries\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Italy\"\n        }\n    ],\n    \"restaurants\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"La Pergola\",\n            \"city\": \"Rome\",\n            \"michelinStars\": 3,\n            \"awardDate\": \"2020-05-20\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Add an invalid country to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/countries/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"countries",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Add an invalid country to a gastronomic culture",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries/:country_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries",
										":country_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "country_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The country with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Add a country to an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000/countries/{{countryId1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000",
								"countries",
								"{{countryId1}}"
							]
						}
					},
					"response": [
						{
							"name": "Add a country to an invalid gastronomic culture",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries/:country_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries",
										":country_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "0"
										},
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a country of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/countries/{{countryId1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"countries",
								"{{countryId1}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a country of a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries/:country_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries",
										":country_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"name\": \"Italy\",\n    \"restaurants\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"La Pergola\",\n            \"city\": \"Rome\",\n            \"michelinStars\": 3,\n            \"awardDate\": \"2020-05-20\"\n        }\n    ],\n    \"cultures\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Italian Gastronomic Culture\",\n            \"description\": \"Rich and diverse culinary traditions.\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get an invalid country of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/countries/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"countries",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Get an invalid country of a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries/:country_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries",
										":country_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "country_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The country with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a country of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000/countries/{{countryId1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000",
								"countries",
								"{{countryId1}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a country of an invalid gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries/:country_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries",
										":country_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "0"
										},
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Get a country non-associated to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {",
									"   pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id is not associated to the gastronomic culture\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/countries/{{countryId2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"countries",
								"{{countryId2}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a country non-associated to a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries/:country_id_2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries",
										":country_id_2"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "country_id_2",
											"value": "00000000-0000-0000-0000-000000000001"
										}
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The country with the given id is not associated to the gastronomic culture\"\n}"
						}
					]
				},
				{
					"name": "Get all countries of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/countries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"countries"
							]
						}
					},
					"response": [
						{
							"name": "Get all countries of a gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"Italy\",\n        \"restaurants\": [\n            {\n                \"id\": \"00000000-0000-0000-0000-000000000000\",\n                \"name\": \"La Pergola\",\n                \"city\": \"Rome\",\n                \"michelinStars\": 3,\n                \"awardDate\": \"2020-05-20\"\n            }\n        ],\n        \"cultures\": [\n            {\n                \"id\": \"00000000-0000-0000-0000-000000000000\",\n                \"name\": \"Italian Gastronomic Culture\",\n                \"description\": \"Rich and diverse culinary traditions.\"\n            }\n        ]\n    }\n]"
						}
					]
				},
				{
					"name": "Get all countries of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000/countries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000",
								"countries"
							]
						}
					},
					"response": [
						{
							"name": "Get all countries of an invalid gastronomic culture",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Update countries of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"{{countryId2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/countries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"countries"
							]
						}
					},
					"response": [
						{
							"name": "Update countries of a gastronomic culture",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"name\": \"Italian\",\n    \"description\": \"Rich and diverse culinary traditions.\",\n    \"recipes\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Pasta Carbonara\",\n            \"description\": \"A classic Italian dish.\",\n            \"photo\": \"url_to_photo\",\n            \"preparationProcess\": \"Detailed steps\",\n            \"video\": \"url_to_video\"\n        }\n    ],\n    \"countries\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Italy\"\n        }\n    ],\n    \"restaurants\": [\n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"La Pergola\",\n            \"city\": \"Rome\",\n            \"michelinStars\": 3,\n            \"awardDate\": \"2020-05-20\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Update invalid countries of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-4000-8000-000000000000\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/countries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"countries"
							]
						}
					},
					"response": [
						{
							"name": "Update invalid countries of a gastronomic culture",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   {\r\n       \"id\": \"0\"\r\n   }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The country with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Update countries of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"{{countryId2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000/countries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000",
								"countries"
							]
						}
					},
					"response": [
						{
							"name": "Update countries of an invalid gastronomic culture",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a country of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/countries/{{countryId2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"countries",
								"{{countryId2}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete a country of a gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries/:country_id_2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries",
										":country_id_2"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "country_id_2",
											"value": "00000000-0000-0000-0000-000000000001"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete an invalid country of a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/countries/00000000-0000-4000-8000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"countries",
								"00000000-0000-4000-8000-000000000000"
							]
						}
					},
					"response": [
						{
							"name": "Delete an invalid country of a gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries/:country_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries",
										":country_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "country_id",
											"value": "0"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The country with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a country of an invalid gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The gastronomic culture with the given id was not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/00000000-0000-4000-8000-000000000000/countries/{{countryId1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"00000000-0000-4000-8000-000000000000",
								"countries",
								"{{countryId1}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete a country of an invalid gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries/:country_id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries",
										":country_id"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "0"
										},
										{
											"key": "country_id",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The gastronomic culture with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a country non-associated to a gastronomic culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {",
									"   pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country with the given id is not associated to the gastronomic culture\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cultures/{{cultureId}}/countries/{{countryId2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cultures",
								"{{cultureId}}",
								"countries",
								"{{countryId2}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete a country non-associated to a gastronomic culture",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/cultures/:culture_id/countries/:country_id_2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"cultures",
										":culture_id",
										"countries",
										":country_id_2"
									],
									"variable": [
										{
											"key": "culture_id",
											"value": "00000000-0000-0000-0000-000000000000"
										},
										{
											"key": "country_id_2",
											"value": "00000000-0000-0000-0000-000000000001"
										}
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The country with the given id is not associated to The gastronomic culture\"\n}"
						}
					]
				}
			],
			"description": "`Country` `1..\\*` —— `1..\\*` `GastronomicCulture`: Un país puede estar asociado a múltiples culturas gastronómicas, por lo menos a una para que esté presente, y una cultura gastronómica puede estar relacionada con múltiples países, como mínimo con uno."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		}
	]
}